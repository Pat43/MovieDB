package dao;

import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

import util.Comparators;
import util.HibernateUtil;
import model.Genre;
import model.Movie;

/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 *
 * This is the object class that relates to the movie table.
 * Any customizations belong here.
 */
public class MovieDAO {
	
	
	public Movie getById(int id) {
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction transaction = null;
		Movie movie = null;
		try {
			transaction = session.beginTransaction();
			movie = (Movie) session.get(Movie.class, id);
			Hibernate.initialize(movie.getGenres());
			Hibernate.initialize(movie.getLanguage());
			transaction.commit();
		}catch(HibernateException he) {
			he.printStackTrace();
		}finally {
			if(session != null) {
				try { 
					session.close(); 
				} catch(HibernateException he){
					he.printStackTrace();
					}
			}
		}
		return movie;
	}
	
	@SuppressWarnings("unchecked")
	public List<Movie> getAll() {
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction transaction = null;
		List<Movie> movies = null;
		try {
			transaction = session.beginTransaction();
			Query query = session.createQuery("from Movie");
			movies = query.list();
			for(Movie movie : movies){
				Hibernate.initialize(movie.getGenres());
				Hibernate.initialize(movie.getLanguage());
			}
			
			transaction.commit();
		}catch(HibernateException he) {
			he.printStackTrace();
		}finally {
			if(session != null) {
				try { 
					session.close(); 
				} catch(HibernateException he){
					he.printStackTrace();
					}
			}
		}
		return movies;
	}
	
	@SuppressWarnings("unchecked")
	public List<Movie> findByCriteria(String movieName, String[] movieGenre, String[] movieLang, String sortBy){
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction transaction = null;
		List<Movie> movies = null;
		try {
			transaction = session.beginTransaction();
			
			Criteria criteria = session.createCriteria(Movie.class);
			if(movieName != "")
				criteria.add(Restrictions.like("name", "%"+movieName+"%"));
			
			movies = criteria.list();
			
			List<String> movieLangList = null;
			List<String> movieGenreList = null;
			
			if(movieLang != null)
				movieLangList= Arrays.asList(movieLang);
			if(movieGenre != null)
				movieGenreList = Arrays.asList(movieGenre);
			
			Iterator<Movie> movieIt = movies.iterator();
			while(movieIt.hasNext()){
				Movie movie = movieIt.next();
				Hibernate.initialize(movie.getGenres());
				Hibernate.initialize(movie.getLanguage());
				if(movieGenreList != null){
					boolean delete = true;
					for(Genre genre : movie.getGenres())
						if(movieGenreList.contains(String.valueOf(genre.getId()))){
							delete = false;
						}
					if(delete)
						movieIt.remove();
				}
				else if(movieLangList != null &&  !movieLangList.contains(String.valueOf(movie.getLanguage().getId())))
					movieIt.remove();
			}
			
			if(sortBy.equals("abc"))
				Collections.sort(movies, new Comparators.AbcComparator());
			else if(sortBy.equals("genre"))
				Collections.sort(movies, new Comparators.genreComparator(Arrays.asList(movieGenre)));
			else if(sortBy.equals("lang"))
				Collections.sort(movies, new Comparators.languageComparator());
			
			transaction.commit();
			
		}catch(HibernateException he) {
			he.printStackTrace();
		}finally {
			if(session != null) {
				try { 
					session.close(); 
				} catch(HibernateException he){
					he.printStackTrace();
					}
			}
		}
		return movies;
		
	}
}